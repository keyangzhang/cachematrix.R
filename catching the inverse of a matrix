# this code works as a class by creating a list
# which has 4 functions: set, get, setInv
# and getInv. 
  makeCacheMatrix <- function(x = matrix()) {

      xinv <- ##the result of inversion will be stored here
      # Using set function to set a matrix to object created by makeCacheMatrix function
      set <- function(y) {
	  x <<- y
	  xinv <<- NULL # it also initialises xinv to null
      }

      get <- function() x 
      setInv <- function(inv) xinv <<- inv # set the inversed matrix of the original one
      getInv <- function() xinv # return the inversed matrix
      list(set = set, get = get, setInv = setInv, getInv = getInv)
  }
  cacheSolve <- function(x, ...) {
      m <- x$getInv() # to get x's inverse matrix
      if(!is.null(m)) { 
	  message("getting cached data")
	  return(m) # return the inversed matrix
      }
      data <- x$get() 
      m <- solve(data) 
      x$setInv(m) # then set x to a object
      m # get the result
  }

  # generate a matrix which is random square, non-singular
  test <- matrix(runif(9,1,100),3,3)
  testCached <- makeCacheMatrix(test)

  testInv <- cacheSolve(testCached)
  testInv <- cacheSolve(testCached)
  testInv <- cacheSolve(testCached)
  testInv <- cacheSolve(testCached)
  testInv <- cacheSolve(testCached)
